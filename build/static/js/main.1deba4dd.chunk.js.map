{"version":3,"sources":["components/Score.js","components/NavBar.js","components/Picture.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Score","props","text","score","NavBar","href","message","highestScore","Picture","src","imgSrc","onClick","pictureId","alt","className","Board","images","id","React","useState","setScore","setHighestScore","Array","from","cards","setCards","clicked","setClicked","setMessage","handleOnClick","console","log","isScore","includes","checkIfScore","i","idx1","Math","floor","random","length","idx2","temp","shuffle","map","card","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1deba4dd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Score = (props) => (\n    <>\n        {props.text}:{props.score}\n    </>\n);\n\nexport default Score;","import React from \"react\";\nimport Score from \"./Score\";\nimport './NavBar.css';\nconst NavBar = props => (\n    <nav>\n        <ul>\n            <li>\n                <a href=\"/\">Clicky Game</a>\n            </li>\n            <li>\n                <p>{props.message}</p> \n            </li>\n            <li>\n                <Score text=\"score\" score={props.score} /> | <Score text=\"highest score\" score={props.highestScore} /> \n            </li>\n        </ul>\n    </nav>\n);\n\n\n\nexport default NavBar;","import React from 'react';\nimport './Picture.css';\nconst Picture = (props) => (\n         <img src={props.imgSrc} onClick={() => props.onClick(props.pictureId)} alt=\"dog\" className=\"fancybox zoom img-fluid col-lg-3 col-md-4 col-xs-6 thumb\" />\n        //props.imgSrc를 받아와서 이미지 소스를 보여주고 프롭스.온클릭해서 이미지를 클릭했을 때 실행이 되도록 한다. \n    );\n    \n\n\nexport default Picture;","import React from 'react';\nimport NavBar from './NavBar';\nimport Picture from './Picture';\n//시작할때 스코어와 탑 스코어는 0으로 시작. \n//1. 게임 페이지에서 처음 이미지를 눌렀을 때 이미지의 아이디가 저장된다. 양쪽 스코어가 1 올라가고 이미지가 섞임,\n//2. 이미지를 눌렀을 때 만약 이미지의 아이디가 저장되어 있는경우 스코어는 0으로 리셋된다. \n//3. 이미지를 눌렀을 때 이미지의 아이디가 저장되어 있지 않은 경우 스코어와 탑 스코어 모두를 1씩 올려준다. \n//4. 탑스코어가 스코어보다 크면 스코어에만 1을 더한다. 탑스코어가 스코어보다 같거나 작으면 둘다 1을 더한다. \n\nconst Board = () => {\n    const images = [\n        {id:0, src: \"/assets/images/dog1.jpg\"},\n        {id:1, src: \"/assets/images/dog2.jpg\"},\n        {id:2, src: \"/assets/images/dog3.jpg\"},\n        {id:3, src: \"/assets/images/dog4.jpg\"},\n        {id:4, src: \"/assets/images/dog5.jpg\"},\n        {id:5, src: \"/assets/images/dog6.jpg\"},\n        {id:6, src: \"/assets/images/dog7.jpg\"},\n        {id:7, src: \"/assets/images/dog8.jpg\"},\n        {id:8, src: \"/assets/images/dog9.jpg\"},\n        {id:9, src: \"/assets/images/dog10.jpg\"},\n        {id:10, src: \"/assets/images/dog11.jpg\"},\n        {id:11, src: \"/assets/images/dog12.jpg\"}\n    ];\n// state\n  // useState(0): [0, (newValue) => {this.state = newValue}];\n  // const [score, setScore] = useState(0);\n \n  // const useStateReturn = useState(0);\n  // const score = useStateReturn[0];\n  // const setScore = useStateReturn[1];\n//앞이 var이름 뒤는 이 베리어블을 업데이트 할 때 사용하는 펑션이름\n  const [score, setScore] = React.useState(0);\n  const [highestScore, setHighestScore] = React.useState(0);\n  const [cards, setCards] = React.useState(Array.from(images));\n  const [clicked, setClicked] = React.useState([]);\n  const [message, setMessage] = React.useState(\"Click an image to begin!\");\n\n  const checkIfScore = (id) => {\n    const isScore = !clicked.includes(id);\n    if (isScore) {\n      // let clickedTemp = [];\n      // for (let i = 0; i < clicked.length; i++) {\n      //   clickedTemp.push(clicked[i]);\n      // }\n      // clickedTemp.push(id);\n      // setClicked(clickedTemp);\n     \n      // setClicked: clicked variable\n\n      // clicked = [1, 2, 3]\n      // id = 0\n      // [...clicked] = [1, 2, 3]\n      // [...clicked, id] = [1, 2, 3, 0]\n     \n      setClicked([...clicked, id]);\n    } else {\n      setClicked([id]);\n    }\n    return isScore;\n  };\n\n  const shuffle = () => {\n    // let numbers = [1, 3, 2];\n    // numbers.sort((a, b) => (a - b));\n    // numbers = [3, 2, 1];\n    //images.sort(() => Math.random() - 0.5);\n   \n    //shuffle\n    for (let i = 0; i < 100; i++) {\n      // 0 ~ 3: Math.floor(Math.random() * 3);\n      // 0 ~ images.length - 1\n      let idx1 = Math.floor(Math.random() * images.length);\n      let idx2 = Math.floor(Math.random() * images.length);\n      let temp = images[idx1];\n      images[idx1] = images[idx2];\n      images[idx2] = temp;\n    }\n   \n    setCards(images);\n  };\n \n\nconst handleOnClick = (id) => {\n    console.log(id + \"clicked!\");\n   \n    // check if score\n    const isScore = checkIfScore(id);\n    if(isScore){\n      setMessage(\"You guessed correctly!\");\n    }else{\n      setMessage(\"You guessed incorrectly!\");\n    }\n    // update score & highest score\n    if (isScore && highestScore < score + 1) {\n      setHighestScore(score + 1);\n    }\n    setScore(isScore ? score + 1 : 1);\n   \n    shuffle();\n  };  \n\n\n  return (\n    <div>\n      <NavBar message={message} score={score} highestScore={highestScore} />\n      \n      <div className=\"container page-top\">\n        <div className=\"row\">\n        {cards.map(card => {\n              console.log('card.map'+card);\n              return (\n                <Picture key= {card.id} imgSrc={card.src} onClick={handleOnClick} pictureId={card.id} />\n                );\n              })}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default Board;","import React from 'react';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <Board />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}